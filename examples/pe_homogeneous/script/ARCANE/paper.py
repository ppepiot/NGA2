"""

Module for automated generation of Latex code

"""

import ARCANE.display as display

import csv

logger = display.Logger()
logger.set_log('logPaper')
logger.create_log('logPaper')

class Paper(object):


    def __init__(self, mechanism):
        """
        Class containing all the information that can be useful to put in a paper.

        Parameters
        ----------
        cases_list :
            list of class :func:`~ARCANE.cases.Case` objects to be transcribed
        mechanism :
            class :func:`~ARCANE.mechanisms.Mechanism` object

        """

        self.cases_list = None
        self.mechanism = mechanism

    def cases2table(self):
        """Writes the cases in a table format in Latex"""

        logger.error("ERROR function cases2table does nothing as of now")

    def mech2latex(self, txt_name=None):
        """Converts a mechanism into Latex code for supplementary material of papers

        Parameters
        ----------
        txt_name :
            name of the output text file (by default, mechanism_nickname.txt)


        """

        if not txt_name:
            txt_name = self.mechanism.nickname + '.txt'

        csv_name = self.mechanism.nickname + '.csv'

        self.mech2latexcsv()

        species_names = self.mechanism.species_names

        file = open(txt_name, 'w')

        ns = self.mechanism.ns
        nr = self.mechanism.nr
        nqss = self.mechanism.nqss

        text = """\\usepackage{csvsimple}\n\\usepackage{lscape}\n\\usepackage{longtable}\n\n"""

        text += "The reduced ARC mechanism generated by ARCANE comprises " + str(ns) + "transported species, "
        text += str(nr) + " reactions"
        if nqss > 0:
            text += " and " + str(nqss) + " species in Quasi-Steady State:\n"
        else:
            text += ":\n"

        latex_species_names = [self.species2tex(spec) for spec in species_names]
        text += "\\begin{itemize}\nTransported species: " + ', '.join(latex_species_names) + "\n\\end{itemize}\n\n"

        if nqss > 0:
            species_qss_names = self.mechanism.species_qss_names
            latex_qss_species_names = [self.species2tex(spec) for spec in species_qss_names]
            text += "\\begin{itemize}\nQSS species: " + ', '.join(latex_qss_species_names) + "\n\\end{itemize}\n\n"

        text += "\n"

        text += """\
Detailed description of the reactions is given in Tab.~\\ref{tab:reac}.

\\begin{landscape}
\\csvautolongtable[
      table head=\\caption{List of reactions with $A$ the pre-exponential factor in $m^{3(n-1)})/kmol^{n-1)}/s$ 
      with n the order of the reaction, $b$ the temperature exponent and $Ea$ the activation energy in $J/kmol$. 
      In the case of fall-off reactions, two sets of Arrhenius coefficients are specified, 
      the first one being the low temperature set and the second one the high temperature set. }
      \\label{tab:reac}\\\\\\hline
               \\csvlinetotablerow\\\\\\hline
               \\endfirsthead\\hline
               \\csvlinetotablerow\\\\\\hline
               \\endhead\\hline
               \\endfoot
               ]{""" + csv_name + """}
\\end{landscape}
"""
        file.write(text)
        file.close()

        logger.info("Latex code has been written in " + txt_name)

    def mech2csv(self, csv_name=None):
        """Converts a mechanism into a csv file for supplementary material of papers

        Parameters
        ----------
        csv_name :
            name of the output csv file (by default, mechanism_nickname.csv)


        """

        mechanism = self.mechanism

        if not csv_name:
            csv_name = mechanism.nickname + '.csv'

        if mechanism.nqss > 0:
            ctmech = mechanism.skeletal.ctmech
            reactions = ctmech.reactions()
            species = mechanism.ctmech.species_names
            species_qss = mechanism.species_qss_names
        else:
            ctmech = mechanism.ctmech
            reactions = ctmech.reactions()
            species = ctmech.species_names
            species_qss = []

        with open(csv_name, mode='w') as csv_file:
            writer = csv.writer(csv_file)#, delimiter='\t', quotechar='"', quoting=csv.QUOTE_MINIMAL)

            if mechanism.nqss > 0:
                n_max = max(mechanism.ns, mechanism.nqss)
                spec_write_list = ['Transported species', 'Quasi-Steady State species']

                for index in range(n_max):
                    if n_max == mechanism.ns and index >= mechanism.nqss:
                        species_qss.append('')
                    elif n_max == mechanism.nqss and index >= mechanism.ns:
                        species.append('')
            else:
                n_max = mechanism.ns
                spec_write_list = ['Species']

            writer.writerow(spec_write_list)
            for index in range(n_max):
                if mechanism.nqss > 0:
                    writer.writerow([species[index], species_qss[index]])
                else:
                    writer.writerow([species[index]])

            writer.writerow('')
            writer.writerow(['No.',
                             'Reaction (of order n)',
                             'Arrhenius pre-exponential factor [m(3(n-1))/kmol(n-1)/s]',
                             'Temperature exponent [-]',
                             'Activation energy [J/kmol]',
                             'Low-pressure limit arrhenius pre-exponential factor [m(3(n-1))/kmol(n-1)/s]',
                             'Low-pressure limit temperature exponent [-]',
                             'Low-pressure limit activation energy [J/kmol]',
                             'High-pressure limit arrhenius pre-exponential factor [m(3(n-1))/kmol(n-1)/s]',
                             'High-pressure limit temperature exponent [-]',
                             'High-pressure limit activation energy [J/kmol]',
                             'Troe coefficients a [-], T3, T1, T2 [K]',
                             'Species efficiencies [kmol/m3]'])

            for index_reac, reac in enumerate(reactions):
                no = str(index_reac + 1)
                equation = reac.equation

                # Init
                A = '-'
                b = '-'
                Ea = '-'
                A_l = '-'
                b_l = '-'
                Ea_l = '-'
                A_h = '-'
                b_h = '-'
                Ea_h = '-'
                eff_string = '-'
                troe_string = '-'

                if ctmech.reaction_type(index_reac) == 1:
                    A = '{:.6E}'.format(reac.rate.pre_exponential_factor)
                    b = '{:.6E}'.format(reac.rate.temperature_exponent)
                    Ea = '{:.6E}'.format(reac.rate.activation_energy)
                elif ctmech.reaction_type(index_reac) == 2:
                    A = '{:.6E}'.format(reac.rate.pre_exponential_factor)
                    b = '{:.6E}'.format(reac.rate.temperature_exponent)
                    Ea = '{:.6E}'.format(reac.rate.activation_energy)
                    eff = reac.efficiencies
                    eff_string = ''
                    for spec in eff:
                        eff_string += spec + ':' + '{:.2E}'.format(eff[spec]) + ' '
                elif ctmech.reaction_type(index_reac) == 4:
                    A_l = '{:.6E}'.format(reac.low_rate.pre_exponential_factor)
                    b_l = '{:.6E}'.format(reac.low_rate.temperature_exponent)
                    Ea_l = '{:.6E}'.format(reac.low_rate.activation_energy)
                    A_h = '{:.6E}'.format(reac.high_rate.pre_exponential_factor)
                    b_h = '{:.6E}'.format(reac.high_rate.temperature_exponent)
                    Ea_h = '{:.6E}'.format(reac.high_rate.activation_energy)
                    eff = reac.efficiencies
                    eff_string = ''
                    for spec in eff:
                        eff_string += spec + ':' + '{:.2E}'.format(eff[spec]) + ' '
                    troe = reac.falloff.parameters
                    troe = ['{:.6E}'.format(val) for val in troe]
                    troe_string = ' '.join(troe)
                else:
                    print('fail')
                    quit()

                writer.writerow([no,
                                 equation,
                                 A,
                                 b,
                                 Ea,
                                 A_l,
                                 b_l,
                                 Ea_l,
                                 A_h,
                                 b_h,
                                 Ea_h,
                                 troe_string,
                                 eff_string])

        logger.info(csv_name + " has been generated")

    def mech2latexcsv(self, csv_name=None):
        """Converts a mechanism into a csv file for supplementary material of papers

        Parameters
        ----------
        csv_name :
            name of the output csv file (by default, mechanism_nickname.csv)
        latex :
            if True, csv is adapted to be used in latex code

        """

        mechanism = self.mechanism

        if not csv_name:
            csv_name = mechanism.nickname + '.csv'

        if mechanism.nqss > 0:
            ctmech = mechanism.skeletal.ctmech
            reactions = ctmech.reactions()
        else:
            ctmech = mechanism.ctmech
            reactions = ctmech.reactions()

        with open(csv_name, mode='w') as csv_file:
            writer = csv.writer(csv_file)#, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)

            writer.writerow(['No.',
                             'Reaction',
                             '$A$',
                             '$b$',
                             '$E_a$'])

            for index_reac, reac in enumerate(reactions):
                no = str(index_reac + 1)
                equation = reac.equation

                equation = equation.replace('<=>', '$\longleftrightarrow$')
                equation = equation.replace('=>', '$\longrightarrow$')

                # Init
                A = '-'
                b = '-'
                Ea = '-'
                eff_string = '-'
                troe_string = '-'

                three_body = False
                eff = False

                if ctmech.reaction_type(index_reac) == 1:
                    A = '{:.6E}'.format(reac.rate.pre_exponential_factor)
                    b = '{:.6E}'.format(reac.rate.temperature_exponent)
                    Ea = '{:.6E}'.format(reac.rate.activation_energy)
                elif ctmech.reaction_type(index_reac) == 2:
                    A = '{:.6E}'.format(reac.rate.pre_exponential_factor)
                    b = '{:.6E}'.format(reac.rate.temperature_exponent)
                    Ea = '{:.6E}'.format(reac.rate.activation_energy)
                    eff = reac.efficiencies
                    eff_string = ''
                    for spec in eff:
                        eff_string += spec + ':' + '{:.2E}'.format(eff[spec]) + ' '
                elif ctmech.reaction_type(index_reac) == 4:
                    three_body = True
                    A = '{:.6E}'.format(reac.low_rate.pre_exponential_factor)
                    b = '{:.6E}'.format(reac.low_rate.temperature_exponent)
                    Ea = '{:.6E}'.format(reac.low_rate.activation_energy)
                    A_h = '{:.6E}'.format(reac.high_rate.pre_exponential_factor)
                    b_h = '{:.6E}'.format(reac.high_rate.temperature_exponent)
                    Ea_h = '{:.6E}'.format(reac.high_rate.activation_energy)
                    eff = reac.efficiencies
                    eff_string = ''
                    for spec in eff:
                        eff_string += spec + ':' + '{:.1E}'.format(eff[spec]) + ' '
                    troe = reac.falloff.parameters
                    troe = ['{:.2E}'.format(val) for val in troe]
                    troe_string = ' '.join(troe)
                else:
                    print('fail')
                    quit()

                writer.writerow([no,
                                 equation,
                                 A,
                                 b,
                                 Ea])

                if three_body:
                    writer.writerow(['',
                                     troe_string,
                                     A_h,
                                     b_h,
                                     Ea_h])
                if eff:
                    writer.writerow(['',
                                     eff_string,
                                     '',
                                     '',
                                     ''])

        logger.info(csv_name + " has been generated")

    def species2tex(self, species_name):
        """Converts a species name written in computer format into latex code
        (CxHy --> :math:`C_{x}H_{y}`)

        Parameters
        ----------
        species_name :
            name of the species as written in the code

        Returns
        -------
        latex code

        """

        previous_is_num = False
        final_text = '$'
        for character in species_name:
            if not character.isnumeric():
                if previous_is_num:
                    final_text += "}" + character
                else:
                    final_text += character

                previous_is_num = False
            else:
                if previous_is_num:
                    final_text += character
                else:
                    final_text += "_{" + character

                previous_is_num = True

        if previous_is_num:
            final_text += "}$"
        else:
            final_text += "$"

        return final_text
